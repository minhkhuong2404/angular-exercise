{"ast":null,"code":"import { map, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport 'rxjs/add/operator/map';\nimport { UIService } from '../shared/ui.service';\nimport * as UI from '../shared/ui.actions';\nimport * as Training from './training.actions';\nimport * as fromTraining from './training.reducer';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../shared/ui.service\";\nimport * as i3 from \"@ngrx/store\";\nexport let TrainingService = /*#__PURE__*/(() => {\n  class TrainingService {\n    constructor(db, uiService, store) {\n      this.db = db;\n      this.uiService = uiService;\n      this.store = store;\n      this.fbSubs = [];\n    }\n\n    fetchAvailableExercises() {\n      this.store.dispatch(new UI.StartLoading());\n      this.fbSubs.push(this.db.collection('availableExercises').snapshotChanges().pipe(map(docArray => {\n        // throw(new Error());\n        return docArray.map(doc => {\n          return {\n            id: doc.payload.doc.id,\n            name: doc.payload.doc.data()['name'],\n            duration: doc.payload.doc.data()['duration'],\n            calories: doc.payload.doc.data()['calories']\n          };\n        });\n      })).subscribe(exercises => {\n        this.store.dispatch(new UI.StopLoading());\n        this.store.dispatch(new Training.SetAvailableTrainings(exercises));\n      }, error => {\n        this.store.dispatch(new UI.StopLoading());\n        this.uiService.showSnackbar('Fetching Exercises failed, please try again later', null, 3000);\n      }));\n    }\n\n    startExercise(selectedId) {\n      this.store.dispatch(new Training.StartTraining(selectedId));\n    }\n\n    completeExercise() {\n      this.store.select(fromTraining.getActiveTraining).pipe(take(1)).subscribe(ex => {\n        this.addDataToDatabase(Object.assign(Object.assign({}, ex), {\n          date: new Date(),\n          state: 'completed'\n        }));\n        this.store.dispatch(new Training.StopTraining());\n      });\n    }\n\n    cancelExercise(progress) {\n      this.store.select(fromTraining.getActiveTraining).pipe(take(1)).subscribe(ex => {\n        this.addDataToDatabase(Object.assign(Object.assign({}, ex), {\n          duration: ex.duration * (progress / 100),\n          calories: ex.calories * (progress / 100),\n          date: new Date(),\n          state: 'completed'\n        }));\n        this.store.dispatch(new Training.StopTraining());\n      });\n    }\n\n    fetchCompletedOrCancelledExercises() {\n      this.fbSubs.push(this.db.collection('finishedExercises').valueChanges().subscribe(exercises => {\n        this.store.dispatch(new Training.SetFinishedTrainings(exercises));\n      }));\n    }\n\n    cancelSubscriptions() {\n      this.fbSubs.forEach(sub => sub.unsubscribe());\n    }\n\n    addDataToDatabase(exercise) {\n      this.db.collection('finishedExercises').add(exercise);\n    }\n\n  }\n\n  TrainingService.ɵfac = function TrainingService_Factory(t) {\n    return new (t || TrainingService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.UIService), i0.ɵɵinject(i3.Store));\n  };\n\n  TrainingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TrainingService,\n    factory: TrainingService.ɵfac\n  });\n  return TrainingService;\n})();","map":null,"metadata":{},"sourceType":"module"}