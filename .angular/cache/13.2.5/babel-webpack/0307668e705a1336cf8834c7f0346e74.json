{"ast":null,"code":"import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { SET_AVAILABLE_TRAININGS, SET_FINISHED_TRAININGS, START_TRAINING, STOP_TRAINING } from './training.actions';\nconst initialState = {\n  availableExercises: [],\n  finishedExercises: [],\n  activeTraining: null\n};\nexport function trainingReducer(state = initialState, action) {\n  switch (action.type) {\n    case SET_AVAILABLE_TRAININGS:\n      return Object.assign(Object.assign({}, state), {\n        availableExercises: action.payload\n      });\n\n    case SET_FINISHED_TRAININGS:\n      return Object.assign(Object.assign({}, state), {\n        finishedExercises: action.payload\n      });\n\n    case START_TRAINING:\n      return Object.assign(Object.assign({}, state), {\n        activeTraining: Object.assign({}, state.availableExercises.find(ex => ex.id === action.payload))\n      });\n\n    case STOP_TRAINING:\n      return Object.assign(Object.assign({}, state), {\n        activeTraining: null\n      });\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport const getTrainingState = createFeatureSelector('training');\nexport const getAvailableExercises = createSelector(getTrainingState, state => state.availableExercises);\nexport const getFinishedExercises = createSelector(getTrainingState, state => state.finishedExercises);\nexport const getActiveTraining = createSelector(getTrainingState, state => state.activeTraining);\nexport const getIsTraining = createSelector(getTrainingState, state => state.activeTraining != null);","map":null,"metadata":{},"sourceType":"module"}