{"ast":null,"code":"import _slicedToArray from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createClass from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _toConsumableArray from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, NgZone, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject } from '@angular/core';\nimport firebase from 'firebase/compat/app';\nimport { VERSION } from '@angular/fire'; // DEBUG quick debugger function for inline logging that typescript doesn't complain about\n//       wrote it for debugging the ɵlazySDKProxy, commenting out for now; should consider exposing a\n//       verbose mode for AngularFire in a future release that uses something like this in multiple places\n//       usage: () => log('something') || returnValue\n// const log = (...args: any[]): false => { console.log(...args); return false }\n// The problem here are things like ngOnDestroy are missing, then triggering the service\n// rather than dig too far; I'm capturing these as I go.\n\nvar noopFunctions = ['ngOnDestroy']; // INVESTIGATE should we make the Proxy revokable and do some cleanup?\n//             right now it's fairly simple but I'm sure this will grow in complexity\n\nvar ɵlazySDKProxy = function ɵlazySDKProxy(klass, observable, zone) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return new Proxy(klass, {\n    get: function get(_, name) {\n      return zone.runOutsideAngular(function () {\n        var _a;\n\n        if (klass[name]) {\n          if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.get) {\n            options.spy.get(name, klass[name]);\n          }\n\n          return klass[name];\n        }\n\n        if (noopFunctions.indexOf(name) > -1) {\n          return function () {};\n        }\n\n        var promise = observable.toPromise().then(function (mod) {\n          var ret = mod && mod[name]; // TODO move to proper type guards\n\n          if (typeof ret === 'function') {\n            return ret.bind(mod);\n          } else if (ret && ret.then) {\n            return ret.then(function (res) {\n              return zone.run(function () {\n                return res;\n              });\n            });\n          } else {\n            return zone.run(function () {\n              return ret;\n            });\n          }\n        }); // recurse the proxy\n\n        return new Proxy(function () {}, {\n          get: function get(_, name) {\n            return promise[name];\n          },\n          // TODO handle callbacks as transparently as I can\n          apply: function apply(self, _, args) {\n            return promise.then(function (it) {\n              var _a;\n\n              var res = it && it.apply(void 0, _toConsumableArray(args));\n\n              if ((_a = options === null || options === void 0 ? void 0 : options.spy) === null || _a === void 0 ? void 0 : _a.apply) {\n                options.spy.apply(name, args, res);\n              }\n\n              return res;\n            });\n          }\n        });\n      });\n    }\n  });\n};\n\nvar ɵapplyMixins = function ɵapplyMixins(derivedCtor, constructors) {\n  constructors.forEach(function (baseCtor) {\n    Object.getOwnPropertyNames(baseCtor.prototype || baseCtor).forEach(function (name) {\n      Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype || baseCtor, name));\n    });\n  });\n};\n\nvar FirebaseApp = /*#__PURE__*/_createClass(function FirebaseApp(app) {\n  _classCallCheck(this, FirebaseApp);\n\n  return app;\n});\n\nvar FIREBASE_OPTIONS = /*#__PURE__*/new InjectionToken('angularfire2.app.options');\nvar FIREBASE_APP_NAME = /*#__PURE__*/new InjectionToken('angularfire2.app.name');\n\nfunction ɵfirebaseAppFactory(options, zone, nameOrConfig) {\n  var name = typeof nameOrConfig === 'string' && nameOrConfig || '[DEFAULT]';\n  var config = typeof nameOrConfig === 'object' && nameOrConfig || {};\n  config.name = config.name || name; // Added any due to some inconsistency between @firebase/app and firebase types\n\n  var existingApp = firebase.apps.filter(function (app) {\n    return app && app.name === config.name;\n  })[0]; // We support FirebaseConfig, initializeApp's public type only accepts string; need to cast as any\n  // Could be solved with https://github.com/firebase/firebase-js-sdk/pull/1206\n\n  var app = existingApp || zone.runOutsideAngular(function () {\n    return firebase.initializeApp(options, config);\n  });\n\n  try {\n    if (JSON.stringify(options) !== JSON.stringify(app.options)) {\n      var hmr = !!module.hot;\n      log$1('error', \"\".concat(app.name, \" Firebase App already initialized with different options\").concat(hmr ? ', you may need to reload as Firebase is not HMR aware.' : '.'));\n    }\n  } catch (e) {}\n\n  return new FirebaseApp(app);\n}\n\nvar log$1 = function log$1(level) {\n  if (isDevMode() && typeof console !== 'undefined') {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    (_console = console)[level].apply(_console, args);\n  }\n};\n\nvar FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: ɵfirebaseAppFactory,\n  deps: [FIREBASE_OPTIONS, NgZone, [/*#__PURE__*/new Optional(), FIREBASE_APP_NAME]]\n};\nvar AngularFireModule = /*#__PURE__*/(function () {\n  var AngularFireModule = /*#__PURE__*/function () {\n    // tslint:disable-next-line:ban-types\n    function AngularFireModule(platformId) {\n      _classCallCheck(this, AngularFireModule);\n\n      firebase.registerVersion('angularfire', VERSION.full, 'core');\n      firebase.registerVersion('angularfire', VERSION.full, 'app-compat');\n      firebase.registerVersion('angular', VERSION$1.full, platformId.toString());\n    }\n\n    _createClass(AngularFireModule, null, [{\n      key: \"initializeApp\",\n      value: function initializeApp(options, nameOrConfig) {\n        return {\n          ngModule: AngularFireModule,\n          providers: [{\n            provide: FIREBASE_OPTIONS,\n            useValue: options\n          }, {\n            provide: FIREBASE_APP_NAME,\n            useValue: nameOrConfig\n          }]\n        };\n      }\n    }]);\n\n    return AngularFireModule;\n  }();\n\n  AngularFireModule.ɵfac = function AngularFireModule_Factory(t) {\n    return new (t || AngularFireModule)(i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  AngularFireModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireModule\n  });\n  AngularFireModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [FIREBASE_APP_PROVIDER]\n  });\n  return AngularFireModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction ɵcacheInstance(cacheKey, moduleName, appName, fn, deps) {\n  var _ref = globalThis.ɵAngularfireInstanceCache.find(function (it) {\n    return it[0] === cacheKey;\n  }) || [],\n      _ref2 = _slicedToArray(_ref, 3),\n      instance = _ref2[1],\n      cachedDeps = _ref2[2];\n\n  if (instance) {\n    if (!matchDep(deps, cachedDeps)) {\n      log('error', \"\".concat(moduleName, \" was already initialized on the \").concat(appName, \" Firebase App with different settings.\").concat(IS_HMR ? ' You may need to reload as Firebase is not HMR aware.' : ''));\n      log('warn', {\n        is: deps,\n        was: cachedDeps\n      });\n    }\n\n    return instance;\n  } else {\n    var newInstance = fn();\n    globalThis.ɵAngularfireInstanceCache.push([cacheKey, newInstance, deps]);\n    return newInstance;\n  }\n}\n\nfunction matchDep(a, b) {\n  try {\n    return a.toString() === b.toString();\n  } catch (_) {\n    return a === b;\n  }\n}\n\nvar IS_HMR = !!module.hot;\n\nvar log = function log(level) {\n  if (isDevMode() && typeof console !== 'undefined') {\n    var _console2;\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    (_console2 = console)[level].apply(_console2, args);\n  }\n};\n\nglobalThis.ɵAngularfireInstanceCache || (globalThis.ɵAngularfireInstanceCache = []);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AngularFireModule, FIREBASE_APP_NAME, FIREBASE_OPTIONS, FirebaseApp, ɵapplyMixins, ɵcacheInstance, ɵfirebaseAppFactory, ɵlazySDKProxy }; //# sourceMappingURL=angular-fire-compat.js.map","map":null,"metadata":{},"sourceType":"module"}