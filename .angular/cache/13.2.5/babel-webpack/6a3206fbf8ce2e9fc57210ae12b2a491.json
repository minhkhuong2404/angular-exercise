{"ast":null,"code":"import { Store } from '@ngrx/store';\nimport { take } from 'rxjs/operators';\nimport { StopTrainingComponent } from './stop-training.component';\nimport { TrainingService } from '../training.service';\nimport * as fromTraining from '../training.reducer';\nimport { MatDialog } from '@angular/material/dialog';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../training.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/flex-layout/flex\";\nimport * as i5 from \"@angular/material/progress-spinner\";\nimport * as i6 from \"@angular/material/button\";\nexport let CurrentTrainingComponent = /*#__PURE__*/(() => {\n  class CurrentTrainingComponent {\n    constructor(dialog, trainingService, store) {\n      this.dialog = dialog;\n      this.trainingService = trainingService;\n      this.store = store;\n      this.progress = 0;\n    }\n\n    ngOnInit() {\n      this.startOrResumeTimer();\n    }\n\n    startOrResumeTimer() {\n      this.store.select(fromTraining.getActiveTraining).pipe(take(1)).subscribe(ex => {\n        const step = ex.duration / 100 * 1000;\n        this.timer = setInterval(() => {\n          this.progress = this.progress + 1;\n\n          if (this.progress >= 100) {\n            this.trainingService.completeExercise();\n            clearInterval(this.timer);\n          }\n        }, step);\n      });\n    }\n\n    onStop() {\n      clearInterval(this.timer);\n      const dialogRef = this.dialog.open(StopTrainingComponent, {\n        data: {\n          progress: this.progress\n        }\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.trainingService.cancelExercise(this.progress);\n        } else {\n          this.startOrResumeTimer();\n        }\n      });\n    }\n\n  }\n\n  CurrentTrainingComponent.ɵfac = function CurrentTrainingComponent_Factory(t) {\n    return new (t || CurrentTrainingComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.TrainingService), i0.ɵɵdirectiveInject(i3.Store));\n  };\n\n  CurrentTrainingComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CurrentTrainingComponent,\n    selectors: [[\"app-current-training\"]],\n    decls: 8,\n    vars: 2,\n    consts: [[\"fxLayout\", \"column\", \"fxLayoutAlign\", \"center center\", 1, \"current-training\"], [\"mode\", \"determinate\", 3, \"value\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 3, \"click\"]],\n    template: function CurrentTrainingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\", 0);\n        i0.ɵɵelement(1, \"mat-progress-spinner\", 1);\n        i0.ɵɵelementStart(2, \"h1\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"p\");\n        i0.ɵɵtext(5, \"Keep on going, you can do it!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function CurrentTrainingComponent_Template_button_click_6_listener() {\n          return ctx.onStop();\n        });\n        i0.ɵɵtext(7, \"Stop\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"value\", ctx.progress);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"\", ctx.progress, \"%\");\n      }\n    },\n    directives: [i4.DefaultLayoutDirective, i4.DefaultLayoutAlignDirective, i5.MatProgressSpinner, i6.MatButton],\n    styles: [\".current-training[_ngcontent-%COMP%]{padding:30px}\"]\n  });\n  return CurrentTrainingComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}