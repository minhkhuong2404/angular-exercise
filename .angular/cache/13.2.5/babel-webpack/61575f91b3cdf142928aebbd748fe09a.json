{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AuthService } from '../auth.service';\nimport { UIService } from '../../shared/ui.service';\nimport * as fromRoot from '../../app.reducer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../auth.service\";\nimport * as i2 from \"../../shared/ui.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/flex-layout/flex\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/progress-spinner\";\n\nfunction LoginComponent_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵtext(1, \"Submit\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.loginForm.invalid);\n  }\n}\n\nfunction LoginComponent_mat_spinner_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\");\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(authService, uiService, store) {\n      this.authService = authService;\n      this.uiService = uiService;\n      this.store = store;\n    }\n\n    ngOnInit() {\n      this.isLoading$ = this.store.select(fromRoot.getIsLoading); // this.loadingSubs = this.uiService.loadingStateChanged.subscribe(\n      //   isLoading => {\n      //     this.isLoading = isLoading;\n      //   }\n      // );\n\n      this.loginForm = new FormGroup({\n        email: new FormControl('', {\n          validators: [Validators.required, Validators.email]\n        }),\n        password: new FormControl('', {\n          validators: [Validators.required]\n        })\n      });\n    }\n\n    onSubmit() {\n      this.authService.login({\n        email: this.loginForm.value.email,\n        password: this.loginForm.value.password\n      });\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.UIService), i0.ɵɵdirectiveInject(i3.Store));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 18,\n    vars: 7,\n    consts: [[\"fxLayout\", \"column\", \"fxLayoutAlign\", \"center center\", \"fxLayoutGap\", \"10px\", 3, \"formGroup\", \"ngSubmit\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Your email\", \"formControlName\", \"email\"], [\"type\", \"password\", \"matInput\", \"\", \"placeholder\", \"Your password\", \"formControlName\", \"password\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"submit\", \"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"disabled\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"section\")(1, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_1_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(2, \"mat-form-field\");\n        i0.ɵɵelement(3, \"input\", 1);\n        i0.ɵɵelementStart(4, \"mat-hint\");\n        i0.ɵɵtext(5, \"Please enter a valid email.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-error\");\n        i0.ɵɵtext(7, \"Invalid or missing email.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"mat-form-field\");\n        i0.ɵɵelement(9, \"input\", 2);\n        i0.ɵɵelementStart(10, \"mat-hint\");\n        i0.ɵɵtext(11, \"Please enter your password.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-error\");\n        i0.ɵɵtext(13, \"Missing password.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(14, LoginComponent_button_14_Template, 2, 1, \"button\", 3);\n        i0.ɵɵpipe(15, \"async\");\n        i0.ɵɵtemplate(16, LoginComponent_mat_spinner_16_Template, 1, 0, \"mat-spinner\", 4);\n        i0.ɵɵpipe(17, \"async\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngIf\", !i0.ɵɵpipeBind1(15, 3, ctx.isLoading$));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(17, 5, ctx.isLoading$));\n      }\n    },\n    directives: [i4.ɵNgNoValidate, i4.NgControlStatusGroup, i5.DefaultLayoutDirective, i5.DefaultLayoutAlignDirective, i5.DefaultLayoutGapDirective, i4.FormGroupDirective, i6.MatFormField, i7.MatInput, i4.DefaultValueAccessor, i4.NgControlStatus, i4.FormControlName, i6.MatHint, i6.MatError, i8.NgIf, i9.MatButton, i10.MatProgressSpinner],\n    pipes: [i8.AsyncPipe],\n    styles: [\"mat-form-field[_ngcontent-%COMP%]{width:300px}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}