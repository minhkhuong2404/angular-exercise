{"ast":null,"code":"import _classCallCheck from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { map, take } from 'rxjs/operators';\nimport { Store } from '@ngrx/store';\nimport 'rxjs/add/operator/map';\nimport { UIService } from '../shared/ui.service';\nimport * as UI from '../shared/ui.actions';\nimport * as Training from './training.actions';\nimport * as fromTraining from './training.reducer';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"../shared/ui.service\";\nimport * as i3 from \"@ngrx/store\";\nexport var TrainingService = /*#__PURE__*/(function () {\n  var TrainingService = /*#__PURE__*/function () {\n    function TrainingService(db, uiService, store) {\n      _classCallCheck(this, TrainingService);\n\n      this.db = db;\n      this.uiService = uiService;\n      this.store = store;\n      this.fbSubs = [];\n    }\n\n    _createClass(TrainingService, [{\n      key: \"fetchAvailableExercises\",\n      value: function fetchAvailableExercises() {\n        var _this = this;\n\n        this.store.dispatch(new UI.StartLoading());\n        this.fbSubs.push(this.db.collection('availableExercises').snapshotChanges().pipe(map(function (docArray) {\n          // throw(new Error());\n          return docArray.map(function (doc) {\n            return {\n              id: doc.payload.doc.id,\n              name: doc.payload.doc.data()['name'],\n              duration: doc.payload.doc.data()['duration'],\n              calories: doc.payload.doc.data()['calories']\n            };\n          });\n        })).subscribe(function (exercises) {\n          _this.store.dispatch(new UI.StopLoading());\n\n          _this.store.dispatch(new Training.SetAvailableTrainings(exercises));\n        }, function (error) {\n          _this.store.dispatch(new UI.StopLoading());\n\n          _this.uiService.showSnackbar('Fetching Exercises failed, please try again later', null, 3000);\n        }));\n      }\n    }, {\n      key: \"startExercise\",\n      value: function startExercise(selectedId) {\n        this.store.dispatch(new Training.StartTraining(selectedId));\n      }\n    }, {\n      key: \"completeExercise\",\n      value: function completeExercise() {\n        var _this2 = this;\n\n        this.store.select(fromTraining.getActiveTraining).pipe(take(1)).subscribe(function (ex) {\n          _this2.addDataToDatabase(Object.assign(Object.assign({}, ex), {\n            date: new Date(),\n            state: 'completed'\n          }));\n\n          _this2.store.dispatch(new Training.StopTraining());\n        });\n      }\n    }, {\n      key: \"cancelExercise\",\n      value: function cancelExercise(progress) {\n        var _this3 = this;\n\n        this.store.select(fromTraining.getActiveTraining).pipe(take(1)).subscribe(function (ex) {\n          _this3.addDataToDatabase(Object.assign(Object.assign({}, ex), {\n            duration: ex.duration * (progress / 100),\n            calories: ex.calories * (progress / 100),\n            date: new Date(),\n            state: 'completed'\n          }));\n\n          _this3.store.dispatch(new Training.StopTraining());\n        });\n      }\n    }, {\n      key: \"fetchCompletedOrCancelledExercises\",\n      value: function fetchCompletedOrCancelledExercises() {\n        var _this4 = this;\n\n        this.fbSubs.push(this.db.collection('finishedExercises').valueChanges().subscribe(function (exercises) {\n          _this4.store.dispatch(new Training.SetFinishedTrainings(exercises));\n        }));\n      }\n    }, {\n      key: \"cancelSubscriptions\",\n      value: function cancelSubscriptions() {\n        this.fbSubs.forEach(function (sub) {\n          return sub.unsubscribe();\n        });\n      }\n    }, {\n      key: \"addDataToDatabase\",\n      value: function addDataToDatabase(exercise) {\n        this.db.collection('finishedExercises').add(exercise);\n      }\n    }]);\n\n    return TrainingService;\n  }();\n\n  TrainingService.ɵfac = function TrainingService_Factory(t) {\n    return new (t || TrainingService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.UIService), i0.ɵɵinject(i3.Store));\n  };\n\n  TrainingService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TrainingService,\n    factory: TrainingService.ɵfac\n  });\n  return TrainingService;\n})();","map":null,"metadata":{},"sourceType":"module"}