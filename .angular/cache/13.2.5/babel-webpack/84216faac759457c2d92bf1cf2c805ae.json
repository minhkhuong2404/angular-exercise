{"ast":null,"code":"import _createClass from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { getApps as getApps$1, getApp as getApp$1, registerVersion as registerVersion$1, deleteApp as deleteApp$1, initializeApp as initializeApp$1, onLog as onLog$1, setLogLevel as setLogLevel$1 } from 'firebase/app';\nexport * from 'firebase/app';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, VERSION as VERSION$1, PLATFORM_ID, NgModule, Inject, NgZone, Injector } from '@angular/core';\nimport { VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\n\nvar FirebaseApp = /*#__PURE__*/_createClass(function FirebaseApp(app) {\n  _classCallCheck(this, FirebaseApp);\n\n  return app;\n});\n\nvar FirebaseApps = /*#__PURE__*/_createClass(function FirebaseApps() {\n  _classCallCheck(this, FirebaseApps);\n\n  return getApps$1();\n});\n\nvar firebaseApp$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(function () {\n  return from(getApps$1());\n}), /*#__PURE__*/distinct());\n\nfunction defaultFirebaseAppFactory(provided) {\n  // Use the provided app, if there is only one, otherwise fetch the default app\n  if (provided && provided.length === 1) {\n    return provided[0];\n  }\n\n  return new FirebaseApp(getApp$1());\n} // With FIREBASE_APPS I wanted to capture the default app instance, if it is initialized by\n// the reserved URL; ɵPROVIDED_FIREBASE_APPS is not for public consumption and serves to ensure that all\n// provideFirebaseApp(...) calls are satisfied before FirebaseApp$ or FirebaseApp is resolved\n\n\nvar PROVIDED_FIREBASE_APPS = /*#__PURE__*/new InjectionToken('angularfire2._apps'); // Injecting FirebaseApp will now only inject the default Firebase App\n// this allows allows beginners to import /__/firebase/init.js to auto initialize Firebase App\n// from the reserved URL.\n\nvar DEFAULT_FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: defaultFirebaseAppFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_FIREBASE_APPS]]\n};\nvar FIREBASE_APPS_PROVIDER = {\n  provide: FirebaseApps,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_FIREBASE_APPS]]\n};\n\nfunction firebaseAppFactory(fn) {\n  return function (zone, injector) {\n    var app = zone.runOutsideAngular(function () {\n      return fn(injector);\n    });\n    return new FirebaseApp(app);\n  };\n}\n\nvar FirebaseAppModule = /*#__PURE__*/(function () {\n  var FirebaseAppModule = /*#__PURE__*/_createClass( // tslint:disable-next-line:ban-types\n  function FirebaseAppModule(platformId) {\n    _classCallCheck(this, FirebaseAppModule);\n\n    registerVersion$1('angularfire', VERSION.full, 'core');\n    registerVersion$1('angularfire', VERSION.full, 'app');\n    registerVersion$1('angular', VERSION$1.full, platformId.toString());\n  });\n\n  FirebaseAppModule.ɵfac = function FirebaseAppModule_Factory(t) {\n    return new (t || FirebaseAppModule)(i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  FirebaseAppModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FirebaseAppModule\n  });\n  FirebaseAppModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n  });\n  return FirebaseAppModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Calling initializeApp({ ... }, 'name') multiple times will add more FirebaseApps into the FIREBASE_APPS\n// injection scope. This allows developers to more easily work with multiple Firebase Applications. Downside\n// is that DI for app name and options doesn't really make sense anymore.\n\n\nfunction provideFirebaseApp(fn) {\n  for (var _len = arguments.length, deps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    deps[_key - 1] = arguments[_key];\n  }\n\n  return {\n    ngModule: FirebaseAppModule,\n    providers: [{\n      provide: PROVIDED_FIREBASE_APPS,\n      useFactory: firebaseAppFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers].concat(deps)\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nvar deleteApp = /*#__PURE__*/ɵzoneWrap(deleteApp$1, true);\nvar getApp = /*#__PURE__*/ɵzoneWrap(getApp$1, true);\nvar getApps = /*#__PURE__*/ɵzoneWrap(getApps$1, true);\nvar initializeApp = /*#__PURE__*/ɵzoneWrap(initializeApp$1, true);\nvar onLog = /*#__PURE__*/ɵzoneWrap(onLog$1, true);\nvar registerVersion = /*#__PURE__*/ɵzoneWrap(registerVersion$1, true);\nvar setLogLevel = /*#__PURE__*/ɵzoneWrap(setLogLevel$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FirebaseApp, FirebaseAppModule, FirebaseApps, deleteApp, firebaseApp$, getApp, getApps, initializeApp, onLog, provideFirebaseApp, registerVersion, setLogLevel }; //# sourceMappingURL=angular-fire-app.js.map","map":null,"metadata":{},"sourceType":"module"}