{"ast":null,"code":"import _defineProperty from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _slicedToArray from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { asyncScheduler, Observable, from, of } from 'rxjs';\nimport * as i1 from '@angular/fire';\nimport { keepUnstableUntilFirst, VERSION } from '@angular/fire';\nimport { startWith, pairwise, map, scan, distinctUntilChanged, filter } from 'rxjs/operators';\nimport { ɵfirebaseAppFactory, ɵcacheInstance, FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire/compat';\nimport { isPlatformServer } from '@angular/common';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport * as i2 from '@angular/fire/compat/auth';\nimport { ɵauthFactory, USE_EMULATOR as USE_EMULATOR$1, SETTINGS as SETTINGS$1, TENANT_ID, LANGUAGE_CODE, USE_DEVICE_LANGUAGE, PERSISTENCE } from '@angular/fire/compat/auth';\nimport * as i3 from '@angular/fire/app-check';\nimport firebase from 'firebase/compat/app';\n\nfunction _fromRef(ref) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : asyncScheduler;\n  return new Observable(function (subscriber) {\n    var unsubscribe;\n\n    if (scheduler != null) {\n      scheduler.schedule(function () {\n        unsubscribe = ref.onSnapshot({\n          includeMetadataChanges: true\n        }, subscriber);\n      });\n    } else {\n      unsubscribe = ref.onSnapshot({\n        includeMetadataChanges: true\n      }, subscriber);\n    }\n\n    return function () {\n      if (unsubscribe != null) {\n        unsubscribe();\n      }\n    };\n  });\n}\n\nfunction fromRef(ref, scheduler) {\n  return _fromRef(ref, scheduler);\n}\n\nfunction fromDocRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(startWith(undefined), pairwise(), map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        priorPayload = _ref2[0],\n        payload = _ref2[1];\n\n    if (!payload.exists) {\n      return {\n        payload: payload,\n        type: 'removed'\n      };\n    }\n\n    if (!(priorPayload === null || priorPayload === void 0 ? void 0 : priorPayload.exists)) {\n      return {\n        payload: payload,\n        type: 'added'\n      };\n    }\n\n    return {\n      payload: payload,\n      type: 'modified'\n    };\n  }));\n}\n\nfunction fromCollectionRef(ref, scheduler) {\n  return fromRef(ref, scheduler).pipe(map(function (payload) {\n    return {\n      payload: payload,\n      type: 'query'\n    };\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are not in sort order but in\n * order of occurence.\n */\n\n\nfunction docChanges(query, scheduler) {\n  return fromCollectionRef(query, scheduler).pipe(startWith(undefined), pairwise(), map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        priorAction = _ref4[0],\n        action = _ref4[1];\n\n    var docChanges = action.payload.docChanges();\n    var actions = docChanges.map(function (change) {\n      return {\n        type: change.type,\n        payload: change\n      };\n    }); // the metadata has changed from the prior emission\n\n    if (priorAction && JSON.stringify(priorAction.payload.metadata) !== JSON.stringify(action.payload.metadata)) {\n      // go through all the docs in payload and figure out which ones changed\n      action.payload.docs.forEach(function (currentDoc, currentIndex) {\n        var docChange = docChanges.find(function (d) {\n          return d.doc.ref.isEqual(currentDoc.ref);\n        });\n        var priorDoc = priorAction === null || priorAction === void 0 ? void 0 : priorAction.payload.docs.find(function (d) {\n          return d.ref.isEqual(currentDoc.ref);\n        });\n\n        if (docChange && JSON.stringify(docChange.doc.metadata) === JSON.stringify(currentDoc.metadata) || !docChange && priorDoc && JSON.stringify(priorDoc.metadata) === JSON.stringify(currentDoc.metadata)) {// document doesn't appear to have changed, don't log another action\n        } else {\n          // since the actions are processed in order just push onto the array\n          actions.push({\n            type: 'modified',\n            payload: {\n              oldIndex: currentIndex,\n              newIndex: currentIndex,\n              type: 'modified',\n              doc: currentDoc\n            }\n          });\n        }\n      });\n    }\n\n    return actions;\n  }));\n}\n/**\n * Return a stream of document changes on a query. These results are in sort order.\n */\n\n\nfunction sortedChanges(query, events, scheduler) {\n  return docChanges(query, scheduler).pipe(scan(function (current, changes) {\n    return combineChanges(current, changes.map(function (it) {\n      return it.payload;\n    }), events);\n  }, []), distinctUntilChanged(), // cut down on unneed change cycles\n  map(function (changes) {\n    return changes.map(function (c) {\n      return {\n        type: c.type,\n        payload: c\n      };\n    });\n  }));\n}\n/**\n * Combines the total result set from the current set of changes from an incoming set\n * of changes.\n */\n\n\nfunction combineChanges(current, changes, events) {\n  changes.forEach(function (change) {\n    // skip unwanted change types\n    if (events.indexOf(change.type) > -1) {\n      current = combineChange(current, change);\n    }\n  });\n  return current;\n}\n/**\n * Splice arguments on top of a sliced array, to break top-level ===\n * this is useful for change-detection\n */\n\n\nfunction sliceAndSplice(original, start, deleteCount) {\n  var returnArray = original.slice();\n\n  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    args[_key - 3] = arguments[_key];\n  }\n\n  returnArray.splice.apply(returnArray, [start, deleteCount].concat(args));\n  return returnArray;\n}\n/**\n * Creates a new sorted array from a new change.\n * Build our own because we allow filtering of action types ('added', 'removed', 'modified') before scanning\n * and so we have greater control over change detection (by breaking ===)\n */\n\n\nfunction combineChange(combined, change) {\n  switch (change.type) {\n    case 'added':\n      if (combined[change.newIndex] && combined[change.newIndex].doc.ref.isEqual(change.doc.ref)) {// Not sure why the duplicates are getting fired\n      } else {\n        return sliceAndSplice(combined, change.newIndex, 0, change);\n      }\n\n      break;\n\n    case 'modified':\n      if (combined[change.oldIndex] == null || combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        // When an item changes position we first remove it\n        // and then add it's new position\n        if (change.oldIndex !== change.newIndex) {\n          var copiedArray = combined.slice();\n          copiedArray.splice(change.oldIndex, 1);\n          copiedArray.splice(change.newIndex, 0, change);\n          return copiedArray;\n        } else {\n          return sliceAndSplice(combined, change.newIndex, 1, change);\n        }\n      }\n\n      break;\n\n    case 'removed':\n      if (combined[change.oldIndex] && combined[change.oldIndex].doc.ref.isEqual(change.doc.ref)) {\n        return sliceAndSplice(combined, change.oldIndex, 1);\n      }\n\n      break;\n  }\n\n  return combined;\n}\n\nfunction validateEventsArray(events) {\n  if (!events || events.length === 0) {\n    events = ['added', 'removed', 'modified'];\n  }\n\n  return events;\n}\n/**\n * AngularFirestoreCollection service\n *\n * This class creates a reference to a Firestore Collection. A reference and a query are provided in\n * in the constructor. The query can be the unqueried reference if no query is desired.The class\n * is generic which gives you type safety for data update methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionRef = firebase.firestore.collection('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollection<Stock>(collectionRef, query);\n *\n * // NOTE!: the updates are performed on the reference not the query\n * await fakeStock.add({ name: 'FAKE', price: 0.01 });\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\n\n\nvar AngularFirestoreCollection = /*#__PURE__*/function () {\n  /**\n   * The constructor takes in a CollectionReference and Query to provide wrapper methods\n   * for data operations and data streaming.\n   *\n   * Note: Data operation methods are done on the reference not the query. This means\n   * when you update data it is not updating data to the window of your query unless\n   * the data fits the criteria of the query. See the AssociatedRefence type for details\n   * on this implication.\n   */\n  function AngularFirestoreCollection(ref, query, afs) {\n    _classCallCheck(this, AngularFirestoreCollection);\n\n    this.ref = ref;\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n\n\n  _createClass(AngularFirestoreCollection, [{\n    key: \"stateChanges\",\n    value: function stateChanges(events) {\n      var source = docChanges(this.query, this.afs.schedulers.outsideAngular);\n\n      if (events && events.length > 0) {\n        source = source.pipe(map(function (actions) {\n          return actions.filter(function (change) {\n            return events.indexOf(change.type) > -1;\n          });\n        }));\n      }\n\n      return source.pipe( // We want to filter out empty arrays, but always emit at first, so the developer knows\n      // that the collection has been resolve; even if it's empty\n      startWith(undefined), pairwise(), filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            prior = _ref6[0],\n            current = _ref6[1];\n\n        return current.length > 0 || !prior;\n      }), map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            prior = _ref8[0],\n            current = _ref8[1];\n\n        return current;\n      }), keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     */\n\n  }, {\n    key: \"auditTrail\",\n    value: function auditTrail(events) {\n      return this.stateChanges(events).pipe(scan(function (current, action) {\n        return [].concat(_toConsumableArray(current), _toConsumableArray(action));\n      }, []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     */\n\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges(events) {\n      var validatedEvents = validateEventsArray(events);\n      var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n      return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return fromCollectionRef(this.query, this.afs.schedulers.outsideAngular).pipe(map(function (actions) {\n        return actions.payload.docs.map(function (a) {\n          if (options.idField) {\n            return Object.assign(Object.assign({}, a.data()), _defineProperty({}, options.idField, a.id));\n          } else {\n            return a.data();\n          }\n        });\n      }), keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n    }\n    /**\n     * Add data to a collection reference.\n     *\n     * Note: Data operation methods are done on the reference not the query. This means\n     * when you update data it is not updating data to the window of your query unless\n     * the data fits the criteria of the query.\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(data) {\n      return this.ref.add(data);\n    }\n    /**\n     * Create a reference to a single document in a collection.\n     */\n\n  }, {\n    key: \"doc\",\n    value: function doc(path) {\n      // TODO is there a better way to solve this type issue\n      return new AngularFirestoreDocument(this.ref.doc(path), this.afs);\n    }\n  }]);\n\n  return AngularFirestoreCollection;\n}();\n/**\n * AngularFirestoreDocument service\n *\n * This class creates a reference to a Firestore Document. A reference is provided in\n * in the constructor. The class is generic which gives you type safety for data update\n * methods and data streaming.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const fakeStock = new AngularFirestoreDocument<Stock>(doc('stocks/FAKE'));\n * await fakeStock.set({ name: 'FAKE', price: 0.01 });\n * fakeStock.valueChanges().map(snap => {\n *   if(snap.exists) return snap.data();\n *   return null;\n * }).subscribe(value => console.log(value));\n * // OR! Transform using Observable.from() and the data is unwrapped for you\n * Observable.from(fakeStock).subscribe(value => console.log(value));\n */\n\n\nvar AngularFirestoreDocument = /*#__PURE__*/function () {\n  /**\n   * The constructor takes in a DocumentReference to provide wrapper methods\n   * for data operations, data streaming, and Symbol.observable.\n   */\n  function AngularFirestoreDocument(ref, afs) {\n    _classCallCheck(this, AngularFirestoreDocument);\n\n    this.ref = ref;\n    this.afs = afs;\n  }\n  /**\n   * Create or overwrite a single document.\n   */\n\n\n  _createClass(AngularFirestoreDocument, [{\n    key: \"set\",\n    value: function set(data, options) {\n      return this.ref.set(data, options);\n    }\n    /**\n     * Update some fields of a document without overwriting the entire document.\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(data) {\n      return this.ref.update(data);\n    }\n    /**\n     * Delete a document.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return this.ref.delete();\n    }\n    /**\n     * Create a reference to a sub-collection given a path and an optional query\n     * function.\n     */\n\n  }, {\n    key: \"collection\",\n    value: function collection(path, queryFn) {\n      var collectionRef = this.ref.collection(path);\n\n      var _associateQuery = associateQuery(collectionRef, queryFn),\n          ref = _associateQuery.ref,\n          query = _associateQuery.query;\n\n      return new AngularFirestoreCollection(ref, query, this.afs);\n    }\n    /**\n     * Listen to snapshot updates from the document.\n     */\n\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges() {\n      var scheduledFromDocRef$ = fromDocRef(this.ref, this.afs.schedulers.outsideAngular);\n      return scheduledFromDocRef$.pipe(keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.snapshotChanges().pipe(map(function (_ref9) {\n        var payload = _ref9.payload;\n        return options.idField ? Object.assign(Object.assign({}, payload.data()), _defineProperty({}, options.idField, payload.id)) : payload.data();\n      }));\n    }\n    /**\n     * Retrieve the document once.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.ref.get(options)).pipe(keepUnstableUntilFirst);\n    }\n  }]);\n\n  return AngularFirestoreDocument;\n}();\n/**\n * AngularFirestoreCollectionGroup service\n *\n * This class holds a reference to a Firestore Collection Group Query.\n *\n * This class uses Symbol.observable to transform into Observable using Observable.from().\n *\n * This class is rarely used directly and should be created from the AngularFirestore service.\n *\n * Example:\n *\n * const collectionGroup = firebase.firestore.collectionGroup('stocks');\n * const query = collectionRef.where('price', '>', '0.01');\n * const fakeStock = new AngularFirestoreCollectionGroup<Stock>(query, afs);\n *\n * // Subscribe to changes as snapshots. This provides you data updates as well as delta updates.\n * fakeStock.valueChanges().subscribe(value => console.log(value));\n */\n\n\nvar AngularFirestoreCollectionGroup = /*#__PURE__*/function () {\n  /**\n   * The constructor takes in a CollectionGroupQuery to provide wrapper methods\n   * for data operations and data streaming.\n   */\n  function AngularFirestoreCollectionGroup(query, afs) {\n    _classCallCheck(this, AngularFirestoreCollectionGroup);\n\n    this.query = query;\n    this.afs = afs;\n  }\n  /**\n   * Listen to the latest change in the stream. This method returns changes\n   * as they occur and they are not sorted by query order. This allows you to construct\n   * your own data structure.\n   */\n\n\n  _createClass(AngularFirestoreCollectionGroup, [{\n    key: \"stateChanges\",\n    value: function stateChanges(events) {\n      if (!events || events.length === 0) {\n        return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(keepUnstableUntilFirst);\n      }\n\n      return docChanges(this.query, this.afs.schedulers.outsideAngular).pipe(map(function (actions) {\n        return actions.filter(function (change) {\n          return events.indexOf(change.type) > -1;\n        });\n      }), filter(function (changes) {\n        return changes.length > 0;\n      }), keepUnstableUntilFirst);\n    }\n    /**\n     * Create a stream of changes as they occur it time. This method is similar to stateChanges()\n     * but it collects each event in an array over time.\n     */\n\n  }, {\n    key: \"auditTrail\",\n    value: function auditTrail(events) {\n      return this.stateChanges(events).pipe(scan(function (current, action) {\n        return [].concat(_toConsumableArray(current), _toConsumableArray(action));\n      }, []));\n    }\n    /**\n     * Create a stream of synchronized changes. This method keeps the local array in sorted\n     * query order.\n     */\n\n  }, {\n    key: \"snapshotChanges\",\n    value: function snapshotChanges(events) {\n      var validatedEvents = validateEventsArray(events);\n      var scheduledSortedChanges$ = sortedChanges(this.query, validatedEvents, this.afs.schedulers.outsideAngular);\n      return scheduledSortedChanges$.pipe(keepUnstableUntilFirst);\n    }\n  }, {\n    key: \"valueChanges\",\n    value: function valueChanges() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var fromCollectionRefScheduled$ = fromCollectionRef(this.query, this.afs.schedulers.outsideAngular);\n      return fromCollectionRefScheduled$.pipe(map(function (actions) {\n        return actions.payload.docs.map(function (a) {\n          if (options.idField) {\n            return Object.assign(_defineProperty({}, options.idField, a.id), a.data());\n          } else {\n            return a.data();\n          }\n        });\n      }), keepUnstableUntilFirst);\n    }\n    /**\n     * Retrieve the results of the query once.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      return from(this.query.get(options)).pipe(keepUnstableUntilFirst);\n    }\n  }]);\n\n  return AngularFirestoreCollectionGroup;\n}();\n/**\n * The value of this token determines whether or not the firestore will have persistance enabled\n */\n\n\nvar ENABLE_PERSISTENCE = /*#__PURE__*/new InjectionToken('angularfire2.enableFirestorePersistence');\nvar PERSISTENCE_SETTINGS = /*#__PURE__*/new InjectionToken('angularfire2.firestore.persistenceSettings');\nvar SETTINGS = /*#__PURE__*/new InjectionToken('angularfire2.firestore.settings');\nvar USE_EMULATOR = /*#__PURE__*/new InjectionToken('angularfire2.firestore.use-emulator');\n/**\n * A utility methods for associating a collection reference with\n * a query.\n *\n * @param collectionRef - A collection reference to query\n * @param queryFn - The callback to create a query\n *\n * Example:\n * const { query, ref } = associateQuery(docRef.collection('items'), ref => {\n *  return ref.where('age', '<', 200);\n * });\n */\n\nfunction associateQuery(collectionRef) {\n  var queryFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (ref) {\n    return ref;\n  };\n  var query = queryFn(collectionRef);\n  var ref = collectionRef;\n  return {\n    query: query,\n    ref: ref\n  };\n}\n/**\n * AngularFirestore Service\n *\n * This service is the main entry point for this feature module. It provides\n * an API for creating Collection and Reference services. These services can\n * then be used to do data updates and observable streams of the data.\n *\n * Example:\n *\n * import { Component } from '@angular/core';\n * import { AngularFirestore, AngularFirestoreCollection, AngularFirestoreDocument } from '@angular/fire/firestore';\n * import { Observable } from 'rxjs/Observable';\n * import { from } from 'rxjs/observable';\n *\n * @Component({\n *   selector: 'app-my-component',\n *   template: `\n *    <h2>Items for {{ (profile | async)?.name }}\n *    <ul>\n *       <li *ngFor=\"let item of items | async\">{{ item.name }}</li>\n *    </ul>\n *    <div class=\"control-input\">\n *       <input type=\"text\" #itemname />\n *       <button (click)=\"addItem(itemname.value)\">Add Item</button>\n *    </div>\n *   `\n * })\n * export class MyComponent implements OnInit {\n *\n *   // services for data operations and data streaming\n *   private readonly itemsRef: AngularFirestoreCollection<Item>;\n *   private readonly profileRef: AngularFirestoreDocument<Profile>;\n *\n *   // observables for template\n *   items: Observable<Item[]>;\n *   profile: Observable<Profile>;\n *\n *   // inject main service\n *   constructor(private readonly afs: AngularFirestore) {}\n *\n *   ngOnInit() {\n *     this.itemsRef = afs.collection('items', ref => ref.where('user', '==', 'davideast').limit(10));\n *     this.items = this.itemsRef.valueChanges().map(snap => snap.docs.map(data => doc.data()));\n *     // this.items = from(this.itemsRef); // you can also do this with no mapping\n *\n *     this.profileRef = afs.doc('users/davideast');\n *     this.profile = this.profileRef.valueChanges();\n *   }\n *\n *   addItem(name: string) {\n *     const user = 'davideast';\n *     this.itemsRef.add({ name, user });\n *   }\n * }\n */\n\n\nvar AngularFirestore = /*#__PURE__*/(function () {\n  var AngularFirestore = /*#__PURE__*/function () {\n    /**\n     * Each Feature of AngularFire has a FirebaseApp injected. This way we\n     * don't rely on the main Firebase App instance and we can create named\n     * apps and use multiple apps.\n     */\n    function AngularFirestore(options, name, shouldEnablePersistence, settings, // tslint:disable-next-line:ban-types\n    platformId, zone, schedulers, persistenceSettings, _useEmulator, auth, useAuthEmulator, authSettings, // can't use firebase.auth.AuthSettings here\n    tenantId, languageCode, useDeviceLanguage, persistence, _appCheckInstances) {\n      _classCallCheck(this, AngularFirestore);\n\n      this.schedulers = schedulers;\n      var app = ɵfirebaseAppFactory(options, zone, name);\n      var useEmulator = _useEmulator;\n\n      if (auth) {\n        ɵauthFactory(app, zone, useAuthEmulator, tenantId, languageCode, useDeviceLanguage, authSettings, persistence);\n      }\n\n      var _ɵcacheInstance = ɵcacheInstance(\"\".concat(app.name, \".firestore\"), 'AngularFirestore', app.name, function () {\n        var firestore = zone.runOutsideAngular(function () {\n          return app.firestore();\n        });\n\n        if (settings) {\n          firestore.settings(settings);\n        }\n\n        if (useEmulator) {\n          firestore.useEmulator.apply(firestore, _toConsumableArray(useEmulator));\n        }\n\n        if (shouldEnablePersistence && !isPlatformServer(platformId)) {\n          // We need to try/catch here because not all enablePersistence() failures are caught\n          // https://github.com/firebase/firebase-js-sdk/issues/608\n          var enablePersistence = function enablePersistence() {\n            try {\n              return from(firestore.enablePersistence(persistenceSettings || undefined).then(function () {\n                return true;\n              }, function () {\n                return false;\n              }));\n            } catch (e) {\n              if (typeof console !== 'undefined') {\n                console.warn(e);\n              }\n\n              return of(false);\n            }\n          };\n\n          return [firestore, zone.runOutsideAngular(enablePersistence)];\n        } else {\n          return [firestore, of(false)];\n        }\n      }, [settings, useEmulator, shouldEnablePersistence]);\n\n      var _ɵcacheInstance2 = _slicedToArray(_ɵcacheInstance, 2);\n\n      this.firestore = _ɵcacheInstance2[0];\n      this.persistenceEnabled$ = _ɵcacheInstance2[1];\n    }\n\n    _createClass(AngularFirestore, [{\n      key: \"collection\",\n      value: function collection(pathOrRef, queryFn) {\n        var collectionRef;\n\n        if (typeof pathOrRef === 'string') {\n          collectionRef = this.firestore.collection(pathOrRef);\n        } else {\n          collectionRef = pathOrRef;\n        }\n\n        var _associateQuery2 = associateQuery(collectionRef, queryFn),\n            ref = _associateQuery2.ref,\n            query = _associateQuery2.query;\n\n        var refInZone = this.schedulers.ngZone.run(function () {\n          return ref;\n        });\n        return new AngularFirestoreCollection(refInZone, query, this);\n      }\n      /**\n       * Create a reference to a Firestore Collection Group based on a collectionId\n       * and an optional query function to narrow the result\n       * set.\n       */\n\n    }, {\n      key: \"collectionGroup\",\n      value: function collectionGroup(collectionId, queryGroupFn) {\n        var queryFn = queryGroupFn || function (ref) {\n          return ref;\n        };\n\n        var collectionGroup = this.firestore.collectionGroup(collectionId);\n        return new AngularFirestoreCollectionGroup(queryFn(collectionGroup), this);\n      }\n    }, {\n      key: \"doc\",\n      value: function doc(pathOrRef) {\n        var ref;\n\n        if (typeof pathOrRef === 'string') {\n          ref = this.firestore.doc(pathOrRef);\n        } else {\n          ref = pathOrRef;\n        }\n\n        var refInZone = this.schedulers.ngZone.run(function () {\n          return ref;\n        });\n        return new AngularFirestoreDocument(refInZone, this);\n      }\n      /**\n       * Returns a generated Firestore Document Id.\n       */\n\n    }, {\n      key: \"createId\",\n      value: function createId() {\n        return this.firestore.collection('_').doc().id;\n      }\n    }]);\n\n    return AngularFirestore;\n  }();\n\n  AngularFirestore.ɵfac = function AngularFirestore_Factory(t) {\n    return new (t || AngularFirestore)(i0.ɵɵinject(FIREBASE_OPTIONS), i0.ɵɵinject(FIREBASE_APP_NAME, 8), i0.ɵɵinject(ENABLE_PERSISTENCE, 8), i0.ɵɵinject(SETTINGS, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.ɵAngularFireSchedulers), i0.ɵɵinject(PERSISTENCE_SETTINGS, 8), i0.ɵɵinject(USE_EMULATOR, 8), i0.ɵɵinject(i2.AngularFireAuth, 8), i0.ɵɵinject(USE_EMULATOR$1, 8), i0.ɵɵinject(SETTINGS$1, 8), i0.ɵɵinject(TENANT_ID, 8), i0.ɵɵinject(LANGUAGE_CODE, 8), i0.ɵɵinject(USE_DEVICE_LANGUAGE, 8), i0.ɵɵinject(PERSISTENCE, 8), i0.ɵɵinject(i3.AppCheckInstances, 8));\n  };\n\n  AngularFirestore.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFirestore,\n    factory: AngularFirestore.ɵfac,\n    providedIn: 'any'\n  });\n  return AngularFirestore;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar AngularFirestoreModule = /*#__PURE__*/(function () {\n  var AngularFirestoreModule = /*#__PURE__*/function () {\n    function AngularFirestoreModule() {\n      _classCallCheck(this, AngularFirestoreModule);\n\n      firebase.registerVersion('angularfire', VERSION.full, 'fst-compat');\n    }\n    /**\n     * Attempt to enable persistent storage, if possible\n     */\n\n\n    _createClass(AngularFirestoreModule, null, [{\n      key: \"enablePersistence\",\n      value: function enablePersistence(persistenceSettings) {\n        return {\n          ngModule: AngularFirestoreModule,\n          providers: [{\n            provide: ENABLE_PERSISTENCE,\n            useValue: true\n          }, {\n            provide: PERSISTENCE_SETTINGS,\n            useValue: persistenceSettings\n          }]\n        };\n      }\n    }]);\n\n    return AngularFirestoreModule;\n  }();\n\n  AngularFirestoreModule.ɵfac = function AngularFirestoreModule_Factory(t) {\n    return new (t || AngularFirestoreModule)();\n  };\n\n  AngularFirestoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFirestoreModule\n  });\n  AngularFirestoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFirestore]\n  });\n  return AngularFirestoreModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { AngularFirestore, AngularFirestoreCollection, AngularFirestoreCollectionGroup, AngularFirestoreDocument, AngularFirestoreModule, ENABLE_PERSISTENCE, PERSISTENCE_SETTINGS, SETTINGS, USE_EMULATOR, associateQuery, combineChange, combineChanges, docChanges, fromCollectionRef, fromDocRef, fromRef, sortedChanges, validateEventsArray }; //# sourceMappingURL=angular-fire-compat-firestore.js.map","map":null,"metadata":{},"sourceType":"module"}