{"ast":null,"code":"import _createClass from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Optional, PLATFORM_ID, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isPlatformServer } from '@angular/common';\nimport { getToken as getToken$1, initializeAppCheck as initializeAppCheck$1, onTokenChanged as onTokenChanged$1, setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabled$1 } from 'firebase/app-check';\nexport * from 'firebase/app-check';\nvar APP_CHECK_PROVIDER_NAME = 'app-check';\n\nvar AppCheck = /*#__PURE__*/_createClass(function AppCheck(appCheck) {\n  _classCallCheck(this, AppCheck);\n\n  return appCheck;\n});\n\nvar AppCheckInstances = /*#__PURE__*/_createClass(function AppCheckInstances() {\n  _classCallCheck(this, AppCheckInstances);\n\n  return ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME);\n});\n\nvar appCheckInstance$ = /*#__PURE__*/ /*#__PURE__*/timer(0, 300).pipe( /*#__PURE__*/concatMap(function () {\n  return from(ɵgetAllInstancesOf(APP_CHECK_PROVIDER_NAME));\n}), /*#__PURE__*/distinct());\nvar PROVIDED_APP_CHECK_INSTANCES = /*#__PURE__*/new InjectionToken('angularfire2.app-check-instances');\nvar APP_CHECK_NAMESPACE_SYMBOL = /*#__PURE__*/Symbol('angularfire2.app-check.namespace');\n\nfunction defaultAppCheckInstanceFactory(provided, defaultApp) {\n  var defaultAppCheck = ɵgetDefaultInstanceOf(APP_CHECK_PROVIDER_NAME, provided, defaultApp);\n  return defaultAppCheck && new AppCheck(defaultAppCheck);\n}\n\nvar LOCALHOSTS = ['localhost', '0.0.0.0', '127.0.0.1'];\nvar isLocalhost = typeof window !== 'undefined' && /*#__PURE__*/LOCALHOSTS.includes(window.location.hostname);\n\nfunction appCheckInstanceFactory(fn) {\n  // tslint:disable-next-line:ban-types\n  return function (zone, injector, platformId) {\n    var _a; // Node should use admin token provider, browser devmode and localhost should use debug token\n\n\n    if (!isPlatformServer(platformId) && (isDevMode() || isLocalhost)) {\n      (_a = globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN) !== null && _a !== void 0 ? _a : globalThis.FIREBASE_APPCHECK_DEBUG_TOKEN = true;\n    }\n\n    var appCheck = zone.runOutsideAngular(function () {\n      return fn(injector);\n    });\n    return new AppCheck(appCheck);\n  };\n}\n\nvar APP_CHECK_INSTANCES_PROVIDER = {\n  provide: AppCheckInstances,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_APP_CHECK_INSTANCES]]\n};\nvar DEFAULT_APP_CHECK_INSTANCE_PROVIDER = {\n  provide: AppCheck,\n  useFactory: defaultAppCheckInstanceFactory,\n  deps: [[/*#__PURE__*/new Optional(), PROVIDED_APP_CHECK_INSTANCES], FirebaseApp, PLATFORM_ID]\n};\nvar AppCheckModule = /*#__PURE__*/(function () {\n  var AppCheckModule = /*#__PURE__*/_createClass(function AppCheckModule() {\n    _classCallCheck(this, AppCheckModule);\n\n    registerVersion('angularfire', VERSION.full, 'app-check');\n  });\n\n  AppCheckModule.ɵfac = function AppCheckModule_Factory(t) {\n    return new (t || AppCheckModule)();\n  };\n\n  AppCheckModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AppCheckModule\n  });\n  AppCheckModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_APP_CHECK_INSTANCE_PROVIDER, APP_CHECK_INSTANCES_PROVIDER]\n  });\n  return AppCheckModule;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction provideAppCheck(fn) {\n  for (var _len = arguments.length, deps = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    deps[_key - 1] = arguments[_key];\n  }\n\n  return {\n    ngModule: AppCheckModule,\n    providers: [{\n      provide: PROVIDED_APP_CHECK_INSTANCES,\n      useFactory: appCheckInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, PLATFORM_ID, ɵAngularFireSchedulers, FirebaseApps].concat(deps)\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nvar getToken = /*#__PURE__*/ɵzoneWrap(getToken$1, true);\nvar initializeAppCheck = /*#__PURE__*/ɵzoneWrap(initializeAppCheck$1, true);\nvar onTokenChanged = /*#__PURE__*/ɵzoneWrap(onTokenChanged$1, true);\nvar setTokenAutoRefreshEnabled = /*#__PURE__*/ɵzoneWrap(setTokenAutoRefreshEnabled$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AppCheck, AppCheckInstances, AppCheckModule, appCheckInstance$, getToken, initializeAppCheck, onTokenChanged, provideAppCheck, setTokenAutoRefreshEnabled }; //# sourceMappingURL=angular-fire-app-check.js.map","map":null,"metadata":{},"sourceType":"module"}