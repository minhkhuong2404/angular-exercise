{"ast":null,"code":"import _classCallCheck from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/minhkhuonglu/Downloads/deployment/deployment/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\nvar _this4 = this;\n\nimport * as i0 from '@angular/core';\nimport { Version, Injectable } from '@angular/core';\nimport { getApps } from 'firebase/app';\nimport { isSupported as isSupported$2 } from 'firebase/remote-config';\nimport { isSupported as isSupported$1 } from 'firebase/messaging';\nimport { isSupported } from 'firebase/analytics';\nimport { queueScheduler, asyncScheduler, Observable } from 'rxjs';\nimport { tap, observeOn, subscribeOn } from 'rxjs/operators';\nvar VERSION = /*#__PURE__*/new Version('7.2.1');\nvar isAnalyticsSupportedValueSymbol = '__angularfire_symbol__analyticsIsSupportedValue';\nvar isAnalyticsSupportedPromiseSymbol = '__angularfire_symbol__analyticsIsSupported';\nvar isRemoteConfigSupportedValueSymbol = '__angularfire_symbol__remoteConfigIsSupportedValue';\nvar isRemoteConfigSupportedPromiseSymbol = '__angularfire_symbol__remoteConfigIsSupported';\nvar isMessagingSupportedValueSymbol = '__angularfire_symbol__messagingIsSupportedValue';\nvar isMessagingSupportedPromiseSymbol = '__angularfire_symbol__messagingIsSupported';\nglobalThis[isAnalyticsSupportedPromiseSymbol] || (globalThis[isAnalyticsSupportedPromiseSymbol] = /*#__PURE__*/ /*#__PURE__*/ /*#__PURE__*/isSupported().then(function (it) {\n  return globalThis[isAnalyticsSupportedValueSymbol] = it;\n}).catch(function () {\n  return globalThis[isAnalyticsSupportedValueSymbol] = false;\n}));\nglobalThis[isMessagingSupportedPromiseSymbol] || (globalThis[isMessagingSupportedPromiseSymbol] = /*#__PURE__*/ /*#__PURE__*/ /*#__PURE__*/isSupported$1().then(function (it) {\n  return globalThis[isMessagingSupportedValueSymbol] = it;\n}).catch(function () {\n  return globalThis[isMessagingSupportedValueSymbol] = false;\n}));\nglobalThis[isRemoteConfigSupportedPromiseSymbol] || (globalThis[isRemoteConfigSupportedPromiseSymbol] = /*#__PURE__*/ /*#__PURE__*/ /*#__PURE__*/isSupported$2().then(function (it) {\n  return globalThis[isRemoteConfigSupportedValueSymbol] = it;\n}).catch(function () {\n  return globalThis[isRemoteConfigSupportedValueSymbol] = false;\n}));\n\nvar isSupportedError = function isSupportedError(module) {\n  return \"The APP_INITIALIZER that is \\\"making\\\" isSupported() sync for the sake of convenient DI has not resolved in this\\ncontext. Rather than injecting \".concat(module, \" in the constructor, first ensure that \").concat(module, \" is supported by calling\\n`await isSupported()`, then retrieve the instance from the injector manually `injector.get(\").concat(module, \")`.\");\n};\n\nvar ɵisMessagingSupportedFactory = {\n  async: function async() {\n    return globalThis[isMessagingSupportedPromiseSymbol];\n  },\n  sync: function sync() {\n    var ret = globalThis[isMessagingSupportedValueSymbol];\n\n    if (ret === undefined) {\n      throw new Error(isSupportedError('Messaging'));\n    }\n\n    return ret;\n  }\n};\nvar ɵisRemoteConfigSupportedFactory = {\n  async: function async() {\n    return globalThis[isRemoteConfigSupportedPromiseSymbol];\n  },\n  sync: function sync() {\n    var ret = globalThis[isRemoteConfigSupportedValueSymbol];\n\n    if (ret === undefined) {\n      throw new Error(isSupportedError('RemoteConfig'));\n    }\n\n    return ret;\n  }\n};\nvar ɵisAnalyticsSupportedFactory = {\n  async: function async() {\n    return globalThis[isAnalyticsSupportedPromiseSymbol];\n  },\n  sync: function sync() {\n    var ret = globalThis[isAnalyticsSupportedValueSymbol];\n\n    if (ret === undefined) {\n      throw new Error(isSupportedError('Analytics'));\n    }\n\n    return ret;\n  }\n};\n\nfunction ɵgetDefaultInstanceOf(identifier, provided, defaultApp) {\n  if (provided) {\n    // Was provide* only called once? If so grab that\n    if (provided.length === 1) {\n      return provided[0];\n    }\n\n    var providedUsingDefaultApp = provided.filter(function (it) {\n      return it.app === defaultApp;\n    }); // Was provide* only called once, using the default app? If so use that\n\n    if (providedUsingDefaultApp.length === 1) {\n      return providedUsingDefaultApp[0];\n    }\n  } // Grab the default instance from the defaultApp\n\n\n  var defaultAppWithContainer = defaultApp;\n  var provider = defaultAppWithContainer.container.getProvider(identifier);\n  return provider.getImmediate({\n    optional: true\n  });\n}\n\nvar ɵgetAllInstancesOf = function ɵgetAllInstancesOf(identifier, app) {\n  var apps = app ? [app] : getApps();\n  var instances = [];\n  apps.forEach(function (app) {\n    var provider = app.container.getProvider(identifier);\n    provider.instances.forEach(function (instance) {\n      if (!instances.includes(instance)) {\n        instances.push(instance);\n      }\n    });\n  });\n  return instances;\n};\n\nfunction noop() {}\n/**\n * Schedules tasks so that they are invoked inside the Zone that is passed in the constructor.\n */\n// tslint:disable-next-line:class-name\n\n\nvar ɵZoneScheduler = /*#__PURE__*/function () {\n  function ɵZoneScheduler(zone) {\n    var delegate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : queueScheduler;\n\n    _classCallCheck(this, ɵZoneScheduler);\n\n    this.zone = zone;\n    this.delegate = delegate;\n  }\n\n  _createClass(ɵZoneScheduler, [{\n    key: \"now\",\n    value: function now() {\n      return this.delegate.now();\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule(work, delay, state) {\n      var targetZone = this.zone; // Wrap the specified work function to make sure that if nested scheduling takes place the\n      // work is executed in the correct zone\n\n      var workInZone = function workInZone(state) {\n        var _this2 = this;\n\n        targetZone.runGuarded(function () {\n          work.apply(_this2, [state]);\n        });\n      }; // Scheduling itself needs to be run in zone to ensure setInterval calls for async scheduling are done\n      // inside the correct zone. This scheduler needs to schedule asynchronously always to ensure that\n      // firebase emissions are never synchronous. Specifying a delay causes issues with the queueScheduler delegate.\n\n\n      return this.delegate.schedule(workInZone, delay, state);\n    }\n  }]);\n\n  return ɵZoneScheduler;\n}();\n\nvar BlockUntilFirstOperator = /*#__PURE__*/function () {\n  function BlockUntilFirstOperator(zone) {\n    _classCallCheck(this, BlockUntilFirstOperator);\n\n    this.zone = zone;\n    this.task = null;\n  }\n\n  _createClass(BlockUntilFirstOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var unscheduleTask = this.unscheduleTask.bind(this);\n      this.task = this.zone.run(function () {\n        return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n      });\n      return source.pipe(tap({\n        next: unscheduleTask,\n        complete: unscheduleTask,\n        error: unscheduleTask\n      })).subscribe(subscriber).add(unscheduleTask);\n    }\n  }, {\n    key: \"unscheduleTask\",\n    value: function unscheduleTask() {\n      var _this3 = this;\n\n      // maybe this is a race condition, invoke in a timeout\n      // hold for 10ms while I try to figure out what is going on\n      setTimeout(function () {\n        if (_this3.task != null && _this3.task.state === 'scheduled') {\n          _this3.task.invoke();\n\n          _this3.task = null;\n        }\n      }, 10);\n    }\n  }]);\n\n  return BlockUntilFirstOperator;\n}(); // tslint:disable-next-line:class-name\n\n\nvar ɵAngularFireSchedulers = /*#__PURE__*/(function () {\n  var ɵAngularFireSchedulers = /*#__PURE__*/_createClass(function ɵAngularFireSchedulers(ngZone) {\n    _classCallCheck(this, ɵAngularFireSchedulers);\n\n    this.ngZone = ngZone;\n    this.outsideAngular = ngZone.runOutsideAngular(function () {\n      return new ɵZoneScheduler(Zone.current);\n    });\n    this.insideAngular = ngZone.run(function () {\n      return new ɵZoneScheduler(Zone.current, asyncScheduler);\n    });\n    globalThis.ɵAngularFireScheduler || (globalThis.ɵAngularFireScheduler = this);\n  });\n\n  ɵAngularFireSchedulers.ɵfac = function ɵAngularFireSchedulers_Factory(t) {\n    return new (t || ɵAngularFireSchedulers)(i0.ɵɵinject(i0.NgZone));\n  };\n\n  ɵAngularFireSchedulers.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ɵAngularFireSchedulers,\n    factory: ɵAngularFireSchedulers.ɵfac,\n    providedIn: 'root'\n  });\n  return ɵAngularFireSchedulers;\n})();\n\n/*#__PURE__*/\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction getSchedulers() {\n  var schedulers = globalThis.ɵAngularFireScheduler;\n\n  if (!schedulers) {\n    throw new Error(\"Either AngularFireModule has not been provided in your AppModule (this can be done manually or implictly using\\nprovideFirebaseApp) or you're calling an AngularFire method outside of an NgModule (which is not supported).\");\n  }\n\n  return schedulers;\n}\n\nfunction runOutsideAngular(fn) {\n  return getSchedulers().ngZone.runOutsideAngular(function () {\n    return fn();\n  });\n}\n\nfunction run(fn) {\n  return getSchedulers().ngZone.run(function () {\n    return fn();\n  });\n}\n\nfunction observeOutsideAngular(obs$) {\n  return obs$.pipe(observeOn(getSchedulers().outsideAngular));\n}\n\nfunction observeInsideAngular(obs$) {\n  return obs$.pipe(observeOn(getSchedulers().insideAngular));\n}\n\nfunction keepUnstableUntilFirst(obs$) {\n  var scheduler = getSchedulers();\n  return ɵkeepUnstableUntilFirstFactory(getSchedulers())(obs$);\n}\n/**\n * Operator to block the zone until the first value has been emitted or the observable\n * has completed/errored. This is used to make sure that universal waits until the first\n * value from firebase but doesn't block the zone forever since the firebase subscription\n * is still alive.\n */\n\n\nfunction ɵkeepUnstableUntilFirstFactory(schedulers) {\n  return function keepUnstableUntilFirst(obs$) {\n    obs$ = obs$.lift(new BlockUntilFirstOperator(schedulers.ngZone));\n    return obs$.pipe( // Run the subscribe body outside of Angular (e.g. calling Firebase SDK to add a listener to a change event)\n    subscribeOn(schedulers.outsideAngular), // Run operators inside the angular zone (e.g. side effects via tap())\n    observeOn(schedulers.insideAngular) // INVESTIGATE https://github.com/angular/angularfire/pull/2315\n    // share()\n    );\n  };\n}\n\nvar zoneWrapFn = function zoneWrapFn(it, macrotask) {\n  var _this = _this4; // function() is needed for the arguments object\n  // tslint:disable-next-line:only-arrow-functions\n\n  return function () {\n    var _arguments = arguments;\n\n    if (macrotask) {\n      setTimeout(function () {\n        if (macrotask.state === 'scheduled') {\n          macrotask.invoke();\n        }\n      }, 10);\n    }\n\n    return run(function () {\n      return it.apply(_this, _arguments);\n    });\n  };\n};\n\nvar ɵzoneWrap = function ɵzoneWrap(it, blockUntilFirst) {\n  // function() is needed for the arguments object\n  // tslint:disable-next-line:only-arrow-functions\n  return function () {\n    var _this5 = this;\n\n    var macrotask;\n    var _arguments = arguments; // if this is a callback function, e.g, onSnapshot, we should create a microtask and invoke it\n    // only once one of the callback functions is tripped.\n\n    for (var i = 0; i < arguments.length; i++) {\n      if (typeof _arguments[i] === 'function') {\n        if (blockUntilFirst) {\n          macrotask || (macrotask = run(function () {\n            return Zone.current.scheduleMacroTask('firebaseZoneBlock', noop, {}, noop, noop);\n          }));\n        } // TODO create a microtask to track callback functions\n\n\n        _arguments[i] = zoneWrapFn(_arguments[i], macrotask);\n      }\n    }\n\n    var ret = runOutsideAngular(function () {\n      return it.apply(_this5, _arguments);\n    });\n\n    if (!blockUntilFirst) {\n      if (ret instanceof Observable) {\n        var schedulers = getSchedulers();\n        return ret.pipe(subscribeOn(schedulers.outsideAngular), observeOn(schedulers.insideAngular));\n      } else {\n        return run(function () {\n          return ret;\n        });\n      }\n    }\n\n    if (ret instanceof Observable) {\n      return ret.pipe(keepUnstableUntilFirst);\n    } else if (ret instanceof Promise) {\n      return run(function () {\n        return new Promise(function (resolve, reject) {\n          return ret.then(function (it) {\n            return run(function () {\n              return resolve(it);\n            });\n          }, function (reason) {\n            return run(function () {\n              return reject(reason);\n            });\n          });\n        });\n      });\n    } else if (typeof ret === 'function' && macrotask) {\n      // Handle unsubscribe\n      // function() is needed for the arguments object\n      // tslint:disable-next-line:only-arrow-functions\n      return function () {\n        setTimeout(function () {\n          if (macrotask && macrotask.state === 'scheduled') {\n            macrotask.invoke();\n          }\n        }, 10);\n        return ret.apply(this, arguments);\n      };\n    } else {\n      // TODO how do we handle storage uploads in Zone? and other stuff with cancel() etc?\n      return run(function () {\n        return ret;\n      });\n    }\n  };\n};\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { VERSION, keepUnstableUntilFirst, observeInsideAngular, observeOutsideAngular, ɵAngularFireSchedulers, ɵZoneScheduler, ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, ɵisAnalyticsSupportedFactory, ɵisMessagingSupportedFactory, ɵisRemoteConfigSupportedFactory, ɵkeepUnstableUntilFirstFactory, ɵzoneWrap }; //# sourceMappingURL=angular-fire.js.map","map":null,"metadata":{},"sourceType":"module"}