{"ast":null,"code":"import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { SET_AVAILABLE_TRAININGS, SET_FINISHED_TRAININGS, START_TRAINING, STOP_TRAINING } from './training.actions';\nvar initialState = {\n  availableExercises: [],\n  finishedExercises: [],\n  activeTraining: null\n};\nexport function trainingReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_AVAILABLE_TRAININGS:\n      return Object.assign(Object.assign({}, state), {\n        availableExercises: action.payload\n      });\n\n    case SET_FINISHED_TRAININGS:\n      return Object.assign(Object.assign({}, state), {\n        finishedExercises: action.payload\n      });\n\n    case START_TRAINING:\n      return Object.assign(Object.assign({}, state), {\n        activeTraining: Object.assign({}, state.availableExercises.find(function (ex) {\n          return ex.id === action.payload;\n        }))\n      });\n\n    case STOP_TRAINING:\n      return Object.assign(Object.assign({}, state), {\n        activeTraining: null\n      });\n\n    default:\n      {\n        return state;\n      }\n  }\n}\nexport var getTrainingState = createFeatureSelector('training');\nexport var getAvailableExercises = createSelector(getTrainingState, function (state) {\n  return state.availableExercises;\n});\nexport var getFinishedExercises = createSelector(getTrainingState, function (state) {\n  return state.finishedExercises;\n});\nexport var getActiveTraining = createSelector(getTrainingState, function (state) {\n  return state.activeTraining;\n});\nexport var getIsTraining = createSelector(getTrainingState, function (state) {\n  return state.activeTraining != null;\n});","map":null,"metadata":{},"sourceType":"module"}